Exercise:

We have an accounts management web application. The application presents different types of entities and allows them to manage them—for example, Accounts, Safes, Users, etc. We want to create three types of forms for Accounts: Add account, Update account, Add administrator account. Your task is to implement those forms, with the thinking that we might have a similar use of these forms for the other entities.

The forms should be as follows:

 

Add account – on the left side should be a stepper, and on the right side should be two steps: the first is to choose a safe from a list of safes. The second should be 3 inputs for username, password, and mail. The password should have at least one upper case letter and one lower case letter. The name should be a maximum of 60 characters. On the bottom of the first step, a Next button should appear, and on the second step, a previous button and submit button should be added. (nothing really should be done for now on submit, except client-side validations as mentioned above.
Update account – allow updating the details from step 2 of Add account. The same validation here too and button of submitting who validate the inputs.
Add administrator account – the left side is a stepper, and the first two steps are similar to the Add account. The third step is for additional information about administrator accounts – a label: Choose an administrator group. Under the label will be 4 radio buttons with labels: admin1, admin2, admin3, and admin4. The submit button should be added, and on submit, you should check the validation from step 2 and also from step 3, validate that at least and only one radio button is checked. Then print to console the selected values from all of the steps (i.e., the values the theoretically should be send to the server).
 

Guidelines:

You can choose the framework you prefer and feel comfortable with the most to implement the exercise.
Write tests
Feel free to use any third party library you want for simplifying the implementation.
Design (UI) the pages as your wishes, but make sure they are responsive (only for browsers, not mobile).



------------------------------------------


What is the Aim of the application?
- accounts management web application.

Entities/Domain:
- Account
	- id
	- userName
	- password
	- mail
	- safeId
	- role: 'Admin' | 'User'
	- additionalInfo: {
		administratorGroupId
	}

- Safe
	- id
	- name
- User -??


Use Cases:
- show all accounts - V
- add account (user) - V
- update account - V
- add account (admin)

--------------------------------------------------

Pages:
1. account list to update - V
3. 3 forms

Forms:
three types of forms for Accounts
- Add account
- Update account
- Add administrator account
-- IMPORTANT: we might have a similar use of these forms for the other entities (Reusability!!)

More Info About The Forms:
- Stepper (Wizard) - left button with steps

Add Account Form:
- 2 steps:
	- 1. choose a safe from a list of safes
	- 2. 3 inputs for username, password, and mail
		- Validation:
		 - name should be a maximum of 60 characters
		 - password should have at least one upper case letter and one lower case letter
	- On the bottom of the first step, a Next button should appear, and on the second step, a previous button and submit button should be added. (nothing really should be done for now on submit, except client-side validations as mentioned above.

Update Account Form
- allow updating the details from step 2 of Add account
	- disable safe selection on update
- Validation: The same validation here too and button of submitting who validate the inputs

Add administrator account Form:
- the first two steps are similar to the Add account
- The third step is for additional information about administrator accounts
	- a label: Choose an administrator group
	- 4 radio buttons with labels: admin1, admin2, admin3, and admin4
		- The submit button should be added, and on submit, you should check the validation from step 2 and also from step 3
		- validate that at least and only one radio button is checked


- Then print to console the selected values from all of the steps (i.e., the values the theoretically should be send to the server).


General:
1. Data Layer?
2. immetate mock data with observable
3. showcase
4. show design - show the process of the thinking about the solution
5. use specator to tests (one with and one without)
6. show layout before start coding

Workflow:
1. prettier! - Done
2. tslint! - Done
3. add CI? - ?
4. add angular material - 


Guidelines:

You can choose the framework you prefer and feel comfortable with the most to implement the exercise.
Write tests
Feel free to use any third party library you want for simplifying the implementation.
Design (UI) the pages as your wishes, but make sure they are responsive (only for browsers, not mobile).



Questions?
1. why we need user entity?
2. what safe entity contain? name and id?
3. "we might have a similar use of these forms for the other entities" - i think its related to reusability in general, But i dont see any other entity that fit to this "Account" specific form stepper


Shay Saffer <Shay.Saffer@cyberark.com>
Shiri Haim <Shiri.Haim@cyberark.com>